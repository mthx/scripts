#!/usr/bin/env python

"""
Script to count non-deleted messages in an IMAP mailbox.

Currently only supports IMAP SSL on default ports.

Author Matt Hillsdon <matt@hillsdon.net>
"""

import imaplib
import getpass
import optparse
import os
import sys

EXIT_SUCCESS = 0
EXIT_ARGS = 1
EXIT_ERROR = 2

def checked_i4(callable, message):
    """Calls callable and checks the IMAP4 result throwing an imaplib.IMAP4.error with message if the result is 'NO'"""
    (status, result) = callable()
    if status == 'NO':
        raise imaplib.IMAP4.error(message)
    return result

def count_messages(options):
    """Prints the number of messages on stdout or an error on stderr and returns the exit code to use."""
    try:
        i4 = imaplib.IMAP4_SSL(options.server)
        i4.login(options.user, options.password)
        try:
            i4.select(options.mailbox)
            [count] = checked_i4(lambda: i4.select(options.mailbox), "Could not select mailbox '%s'." % (options.mailbox,))
            # count includes deleted messages, so search instead
            [results] = checked_i4(lambda: i4.search(None, 'UNDELETED'), "Could not search mailbox '%s'." % (options.mailbox,))
            print len(results.split(' '))
            i4.close()
        finally:
            i4.logout()
    except imaplib.IMAP4.error, e:
        print >> sys.stderr, str(e)
        return EXIT_ERROR
    return EXIT_SUCCESS

def get_password(interactive):
    if interactive:
        return getpass.getpass()
    else:
        return sys.stdin.read().rstrip('\n')

if __name__ =='__main__':
    parser = optparse.OptionParser(usage='usage: %prog [options]')
    parser.add_option("-s", "--server", help="server to connect to; required")
    parser.add_option("-m", "--mailbox", default="INBOX", help="mailbox to count; default: INBOX")
    parser.add_option("-u", "--user", default=os.environ['USER'], help="user to connect as; default: $USER")
    parser.add_option("-n", "--non-interactive", action="store_false", dest="interactive", default=True, help="read password from stdin rather than prompting")
    (options, args) = parser.parse_args()

    if options.server is None or options.user is None:
        print >> sys.stderr, "Invalid arguments."
        parser.print_help(sys.stderr)
        sys.exit(EXIT_ARGS)
    options.password = get_password(options.interactive)
    sys.exit(count_messages(options))

